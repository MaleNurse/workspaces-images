#!/bin/bash

export HOME="/home/kasm-user"
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
umask 022

# Do we have a Github API token?
[ "${GH_TOKEN}" ] || {
  [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  [ "${GH_TOKEN}" ] || {
    [ -f $HOME/.private ] && source $HOME/.private
    [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  }
}

notify-send -u critical "Post Installation Configuration" \
                        "Please be patient while the Wing desktop is initialized"

LOGDIR="$HOME/logs"

notify-send "Installing JetBrains Nerd Mono font"
# Install JetBrains Mono font
[ -x $HOME/bin/install-jetbrains ] && {
  ${HOME}/bin/install-jetbrains > ${LOGDIR}/install-jetbrains.log 2>&1
  FONT_FILES=".config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml \
              .config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml \
              .config/xfce4/terminal/terminalrc"
  [ -f $HOME/.local/share/fonts/JetBrainsMonoNerdFontMono-Regular.ttf ] && {
    for font_file in ${FONT_FILES}
    do
      [ -f $HOME/${font_file}-jb ] && mv $HOME/${font_file}-jb $HOME/${font_file}
    done
  }
}

notify-send "Installing Visual Studio Code Wing extension"
# Install VS Code Wing extension
have_code=$(type -p code)
[ "${have_code}" ] && {
  code --install-extension Monada.vscode-wing > ${LOGDIR}/vscode-wing.log 2>&1
}

notify-send "Installing Kitty terminal emulator"
# Install Kitty terminal emulator
have_kitty=$(type -p kitty)
[ "${have_kitty}" ] || {
  [ -x $HOME/bin/install-kitty ] && {
    ${HOME}/bin/install-kitty > ${LOGDIR}/install-kitty.log 2>&1
  }
}

notify-send "Installing Neovim"
# Try to install Neovim and Neovide
have_nvim=$(type -p nvim)
have_neov=$(type -p neovide)

notify-send "Installing Neovim"
[ "${have_nvim}" ] || {
  [ -x $HOME/bin/install-neovim ] && {
    ${HOME}/bin/install-neovim > ${LOGDIR}/install-neovim.log 2>&1
  }
}

notify-send "Installing Neovide"
[ "${have_neov}" ] || {
  [ -x $HOME/bin/install-neovide ] && {
    ${HOME}/bin/install-neovide > ${LOGDIR}/install-neovide.log 2>&1
  }
}

# We gave it our best shot
rm -f /home/*/bin/install-neovim
rm -f /home/*/bin/install-neovide
rm -f $HOME/.config/autostart/postinstall.desktop

notify-send "Installing Neovim Configuration Manager"
have_lazy=$(type -p install-lazyman)
[ "${have_lazy}" ] && {
  install-lazyman -z noinstall > ${LOGDIR}/lazyman-install.log 2>&1
}
rm -f /home/*/bin/install-lazyman

notify-send "Installing Desktop entries and fixing permissions"
# Fix Lazyman permissions
[ -d $HOME/.config/nvim-Lazyman/scripts ] && {
  chmod 755 $HOME/.config/nvim-Lazyman/scripts/*.sh
  chmod 755 $HOME/.config/nvim-Lazyman/scripts/*/*.sh
  chmod 755 $HOME/.config/nvim-Lazyman/*.sh
}

[ -f $HOME/.local/share/applications/lazyman.desktop ] && {
  cp $HOME/.local/share/applications/lazyman.desktop \
     $HOME/Desktop/lazyman.desktop
}
[ -f $HOME/.local/share/applications/nvims.desktop ] && {
  cp $HOME/.local/share/applications/nvims.desktop \
     $HOME/Desktop/nvims.desktop
}
[ -f $HOME/.local/share/applications/kitty.desktop ] && {
  cp $HOME/.local/share/applications/kitty.desktop \
     $HOME/.config/autostart/kitty.desktop
  cp $HOME/.local/share/applications/kitty.desktop \
     $HOME/Desktop/kitty.desktop
}
[ -f $HOME/.local/share/icons/hicolor/256x256/apps/kitty.png ] && {
  cp $HOME/.local/share/icons/hicolor/256x256/apps/kitty.png \
     $HOME/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png
}
[ -f $HOME/.local/share/icons/hicolor/128x128/apps/kitty.png ] && {
  cp $HOME/.local/share/icons/hicolor/128x128/apps/kitty.png \
     $HOME/.local/kitty.app/lib/kitty/logo/kitty-128.png
}
[ -f $HOME/.local/share/icons/hicolor/32x32/apps/kitty.png ] && {
  cp $HOME/.local/share/icons/hicolor/32x32/apps/kitty.png \
     $HOME/.local/kitty.app/lib/kitty/logo/kitty.png
}

# Correct permissions/ownership
chmod 755 $HOME
chmod 644 $HOME/.aliases $HOME/.bashrc
find $HOME/.config -type f | xargs chmod 644
find $HOME/.config -type d | xargs chmod 755
find $HOME/.local -type d | xargs chmod 755
find $HOME/src -type f | xargs chmod 644
find $HOME/src -type d | xargs chmod 755
chmod 755 $HOME/Desktop
chmod 755 $HOME/Desktop/*
chmod 755 $HOME/bin
chmod 755 $HOME/bin/*
chmod 755 $HOME/.cargo
chmod 755 $HOME/logs

rm -f $HOME/Desktop/xfce4-terminal.desktop
rm -f $HOME/Desktop/xfce4-file-manager.desktop

rm -rf /home/kasm-default-profile/*
rm -rf /home/kasm-default-profile/.??*

kill $(pgrep "notifyd")
