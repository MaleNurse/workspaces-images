#!/bin/bash

export HOME="/home/kasm-user"
export PATH="${HOME}/bin:${HOME}/.local/bin:$PATH"
umask 022

# Do we have a Github API token?
[ "${GH_TOKEN}" ] || {
  [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  [ "${GH_TOKEN}" ] || {
    [ -f ${HOME}/.private ] && source ${HOME}/.private
    [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  }
}
[ "${GH_TOKEN}" ] && {
  # Check to make sure
  echo "${GH_TOKEN}" | grep __GITHUB_API | grep __TOKEN__ > /dev/null && {
    # It didn't get set right, unset it
    export GH_TOKEN=
  }
}

sleep 4
notify-send -u critical "One-time Wing Desktop Configuration"
notify-send -u critical "Installing Neovim Configuration Manager and Dependencies" \

LOGDIR="${HOME}/logs"

[ -f ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png \
     ${HOME}/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png
}
[ -f ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty-128.png
}
[ -f ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty.png
}
[ -f ${HOME}/.local/share/applications/kitty.desktop ] && {
  cp ${HOME}/.local/share/applications/kitty.desktop \
     ${HOME}/Desktop/kitty.desktop
}

notify-send "Installing nvm node version manager"

export NVM_DIR="/home/kasm-user/.nvm"
export NODE_VERSION="20.9.0"
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
. ${NVM_DIR}/nvm.sh
nvm install ${NODE_VERSION} > ${LOGDIR}/install-wing.log 2>&1
nvm alias default ${NODE_VERSION}
nvm use default

export NODE_PATH="${NVM_DIR}/v${NODE_VERSION}/lib/node_modules"
export PATH="${NVM_DIR}/v${NODE_VERSION}/bin:${PATH}"

notify-send "Installing Wing"

have_npm=$(type -p npm)
[ "${have_npm}" ] && npm -g install winglang >> ${LOGDIR}/install-wing.log 2>&1

notify-send "Cloning Wing examples into ${HOME}/Wing/"
git clone https://github.com/winglang/examples.git \
  ${HOME}/Wing > ${LOGDIR}/clone-examples.log 2>&1

notify-send "Installing Visual Studio Code Wing extension"
# Install VS Code Wing extension
have_code=$(type -p code)
[ "${have_code}" ] && {
  code --install-extension Monada.vscode-wing > ${LOGDIR}/vscode-wing.log 2>&1
}

# Try to install Neovim and Neovide
have_nvim=$(type -p nvim)
have_neov=$(type -p neovide)

notify-send "Installing Neovim"
[ "${have_nvim}" ] || {
  [ -x ${HOME}/bin/install-neovim ] && {
    ${HOME}/bin/install-neovim > ${LOGDIR}/install-neovim.log 2>&1
  }
}

notify-send "Installing Neovide"
[ "${have_neov}" ] || {
  [ -x ${HOME}/bin/install-neovide ] && {
    ${HOME}/bin/install-neovide > ${LOGDIR}/install-neovide.log 2>&1
  }
}

notify-send "Installing the Lazyman Neovim configuration manager"
have_lazy=$(type -p install-lazyman)
have_kitty=$(type -p kitty)
[ "${have_lazy}" ] && {
  if [ "${have_kitty}" ]; then
    nohup kitty --title="Lazyman Initialization" \
                --start-as normal \
                --override startup_session=none \
                kitty-install-lazyman 2>&1
  else
    nohup xfce4-terminal -x kitty-install-lazyman 2>&1
  fi
}

# We gave it our best shot
rm -f /home/*/bin/install-kitty
rm -f /home/*/bin/install-lazyman
rm -f /home/*/bin/kitty-install-lazyman
rm -f /home/*/bin/install-neovim
rm -f /home/*/bin/install-neovide

notify-send "Installing Desktop entries and fixing permissions"

for desk in lazyman neovide neovim
do
  [ -f ${HOME}/.local/share/applications/${desk}.desktop ] && {
    cp ${HOME}/.local/share/applications/${desk}.desktop \
       ${HOME}/Desktop/${desk}.desktop
  }
done

# Correct permissions/ownership
find ${HOME}/Wing -type f | xargs chmod 644
find ${HOME}/Wing -type d | xargs chmod 755
for cdir in ${HOME}/.config/*
do
  [ "${cdir}" == "${HOME}/.config/*" ] && continue
  [ "${cdir}" == "${HOME}/.config/nvim-Lazyman" ] && continue
  [ "${cdir}" == "${HOME}/.config/autostart" ] && continue
  find ${cdir} -type f | xargs chmod 644
done
chmod 600 ${HOME}/.config/user-dirs.*
chmod 755 ${HOME}/.cargo
for nss in ${HOME}/.pki/nssdb/*
do
  [ "${nss}" == "${HOME}/.pki/nssdb/*" ] && continue
  [ -d "${nss}" ] && chmod 700 "${nss}"
  [ -f "${nss}" ] && chmod 600 "${nss}"
done
[ -f ${HOME}/.pki/nssdb/pkcs11.txt ] && {
  cat ${HOME}/.pki/nssdb/pkcs11.txt | sed -e "s/kasm-default-profile/kasm-user/g" > /tmp/k$$
  cp /tmp/k$$ ${HOME}/.pki/nssdb/pkcs11.txt
  rm -f /tmp/k$$
}

[ -f $HOME/.local/share/applications/code.desktop ] && {
  cp $HOME/.local/share/applications/code.desktop \
     $HOME/Desktop/code.desktop
}
[ -f $HOME/.local/share/applications/lazyman.desktop ] && {
  cp $HOME/.local/share/applications/lazyman.desktop \
     $HOME/Desktop/lazyman.desktop
}
[ -f $HOME/.local/share/applications/btop.desktop ] && {
  cp $HOME/.local/share/applications/btop.desktop \
     $HOME/Desktop/btop.desktop
}
[ -f $HOME/.local/share/applications/ranger.desktop ] && {
  cp $HOME/.local/share/applications/ranger.desktop \
     $HOME/Desktop/ranger.desktop
}

# Fix Lazyman permissions
[ -d ${HOME}/.config/nvim-Lazyman/scripts ] && {
  chmod 755 ${HOME}/.config/nvim-Lazyman/scripts/*.sh
  chmod 755 ${HOME}/.config/nvim-Lazyman/scripts/*/*.sh
  chmod 755 ${HOME}/.config/nvim-Lazyman/*.sh
}

rm -f ${HOME}/.config/autostart/postinstall.desktop

rm -rf /home/kasm-default-profile/*
rm -rf /home/kasm-default-profile/.??*

notify-send "Wing desktop initialization and configuration complete!"
sleep 5

kill $(pgrep "notifyd")

have_open=$(type -p exo-open)
[ -f /etc/xdg/autostart/xfce4-notifyd.desktop ] && {
  [ "${have_open}" ] && exo-open /etc/xdg/autostart/xfce4-notifyd.desktop
}

[ -x /home/kasm-user/.local/kitty.app/bin/kitty ] && {
  /home/kasm-user/.local/kitty.app/bin/kitty \
      --session /home/kasm-user/.config/kitty/sessions/startup \
      --title 'Welcome to the Wing Kasm workspace' 2> /dev/null &
}
