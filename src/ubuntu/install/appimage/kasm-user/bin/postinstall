#!/bin/bash

export HOME="/home/kasm-user"
export PATH="${HOME}/bin:${HOME}/.local/bin:$PATH"
umask 022

# Do we have a Github API token?
[ "${GH_TOKEN}" ] || {
  [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  [ "${GH_TOKEN}" ] || {
    [ -f ${HOME}/.private ] && source ${HOME}/.private
    [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  }
}
[ "${GH_TOKEN}" ] && {
  # Check to make sure
  echo "${GH_TOKEN}" | grep __GITHUB_API | grep __TOKEN__ > /dev/null && {
    # It didn't get set right, unset it
    export GH_TOKEN=
  }
}

sleep 5
notify-send -u critical "One-time AppImage Launcher Desktop Configuration"

LOGDIR="${HOME}/logs"

notify-send "Installing JetBrainsMono Nerd Font"
have_fc=$(type -p fc-cache)
[ "${have_fc}" ] && fc-cache -f

FONT_FILES=".config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml \
            .config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml \
            .config/xfce4/terminal/terminalrc"
for font_file in ${FONT_FILES}
do
  [ -f ${HOME}/${font_file}-jb ] && mv ${HOME}/${font_file}-jb ${HOME}/${font_file}
done
xfce4-panel -r
xfconf-query -c xsettings -p /Gtk/FontName -s "JetBrainsMono Nerd Font"
xfconf-query -c xsettings -p /Gtk/MonospaceFontName -s "JetBrainsMono Nerd Font Mono"

notify-send "Installing Kitty terminal emulator"
# Install Kitty terminal emulator
have_kitty=$(type -p kitty)
[ "${have_kitty}" ] || {
  [ -x ${HOME}/bin/install-kitty ] && {
    ${HOME}/bin/install-kitty > ${LOGDIR}/install-kitty.log 2>&1
  }
}
[ -f ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png \
     ${HOME}/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png
}
[ -f ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty-128.png
}
[ -f ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty.png
}
[ -f ${HOME}/.local/share/applications/kitty.desktop ] && {
  cp ${HOME}/.local/share/applications/kitty.desktop \
     ${HOME}/Desktop/kitty.desktop
}

notify-send "Installing nvm node version manager"

export NVM_DIR="/home/kasm-user/.nvm"
export NODE_VERSION="20.9.0"
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
. ${NVM_DIR}/nvm.sh
nvm install ${NODE_VERSION} > ${LOGDIR}/install-node.log 2>&1
nvm alias default ${NODE_VERSION}
nvm use default

export NODE_PATH="${NVM_DIR}/v${NODE_VERSION}/lib/node_modules"
export PATH="${NVM_DIR}/v${NODE_VERSION}/bin:${PATH}"

notify-send "Installing zoxide smart cd command"
curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash

notify-send "Installing Obsidian Cheat Sheets Vault"
git clone https://github.com/doctorfree/cheat-sheets-plus ${HOME}/Documents/cheat-sheets-plus
[ -f ${HOME}/.config/obsidian.tar.gz ] && {
  tar xzf ${HOME}/.config/obsidian.tar.gz -C ${HOME}/.config
  rm -f ${HOME}/.config/obsidian.tar.gz
}
[ -f ${HOME}/.config/dotobsidian.tar.gz ] && {
  [ -d ${HOME}/Documents/cheat-sheets-plus ] && {
    tar xzf ${HOME}/.config/dotobsidian.tar.gz -C ${HOME}/Documents/cheat-sheets-plus
  }
  rm -f ${HOME}/.config/dotobsidian.tar.gz
}
[ -f ${HOME}/.config/_obs-cli ] && {
  [ -d ${HOME}/.oh-my-zsh/completions ] || mkdir -p ${HOME}/.oh-my-zsh/completions
  cp ${HOME}/.config/_obs-cli ${HOME}/.oh-my-zsh/completions/_obs-cli
  rm -f ${HOME}/.config/_obs-cli
}
# Register the mime type with XDG
xdg-mime default obsidian.desktop x-scheme-handler/obsidian
sudo update-desktop-database
[ -x /usr/local/bin/obs-cli ] && {
  /usr/local/bin/obs-cli set-default cheat-sheets-plus > /dev/null 2>&1
}

notify-send "Installing Pillow and Pygments"
python3 -m pip install --user Pillow > ${LOGDIR}/install-python.log 2>&1
python3 -m pip install --user Pygments >> ${LOGDIR}/install-python.log 2>&1

notify-send "Installing Glow markdown previewer"
go install github.com/charmbracelet/glow@latest > ${LOGDIR}/install-glow.log 2>&1

notify-send "Installing Vim plugins"
vim +PlugInstall +qall > /dev/null 2>&1

notify-send "Installing fzf fuzzy finder"
if [ "${GH_TOKEN}" ]; then
  AUTH_HEADER="-H \"Authorization: Bearer ${GH_TOKEN}\""
else
  AUTH_HEADER=
fi
API_URL="https://api.github.com/repos/junegunn/fzf/releases/latest"
DL_URL=
DL_URL=$(curl --silent ${AUTH_HEADER} "${API_URL}" \
    | jq --raw-output '.assets | .[]?.browser_download_url' \
    | grep "linux_amd64\.tar\.gz")

[ "${DL_URL}" ] && {
  TEMP_TGZ="$(mktemp --suffix=.tgz)"
  wget --quiet -O "${TEMP_TGZ}" "${DL_URL}"
  chmod 644 "${TEMP_TGZ}"
  mkdir -p /tmp/fzft$$
  tar -C /tmp/fzft$$ -xzf "${TEMP_TGZ}"
  [ -f /tmp/fzft$$/fzf ] && {
    [ -d ${HOME}/.local/bin ] || mkdir -p ${HOME}/.local/bin
    cp /tmp/fzft$$/fzf ${HOME}/.local/bin/fzf
    chmod 755 ${HOME}/.local/bin/fzf
  }
  rm -f "${TEMP_TGZ}"
  rm -rf /tmp/fzft$$
}

rm -f ${HOME}/.config/autostart/postinstall.desktop

notify-send "Installing Desktop entries and fixing permissions"

[ -f ${HOME}/.local/share/applications/btop.desktop ] && {
  cp ${HOME}/.local/share/applications/btop.desktop \
     ${HOME}/Desktop/btop.desktop
}
[ -f ${HOME}/.local/share/applications/ranger.desktop ] && {
  cp ${HOME}/.local/share/applications/ranger.desktop \
     ${HOME}/Desktop/ranger.desktop
}

# Correct permissions/ownership
chmod 755 ${HOME}
chmod 644 ${HOME}/.aliases ${HOME}/.bashrc ${HOME}/.zshrc
for fdir in launchpadlib mozilla vim
do
  [ -d ${HOME}/.${fdir} ] && {
    find ${HOME}/.${fdir} -type f | xargs chmod 644
    find ${HOME}/.${fdir} -type d | xargs chmod 755
  }
done
find ${HOME}/.vim -type f -print0 | xargs -0 grep -l /usr/bin/env | while read f
do
  chmod 755 $f
done
find ${HOME}/.config -type d | xargs chmod 755
for cdir in ${HOME}/.config/*
do
  [ "${cdir}" == "${HOME}/.config/*" ] && continue
  [ "${cdir}" == "${HOME}/.config/nvim-Lazyman" ] && continue
  [ "${cdir}" == "${HOME}/.config/autostart" ] && continue
  find ${cdir} -type f | xargs chmod 644
done
chmod 600 ${HOME}/.config/user-dirs.*
find ${HOME}/.local -type d | xargs chmod 755
find ${HOME}/.local/share/icons -type f | xargs chmod 644
find ${HOME}/.oh-my-zsh -type d | xargs chmod 755
find ${HOME}/.oh-my-zsh -perm 666 | xargs chmod 644
find ${HOME}/.oh-my-zsh -perm 777 | xargs chmod 755
chmod 755 ${HOME}/.config/ranger/*.sh
chmod 755 ${HOME}/Desktop
chmod 755 ${HOME}/Desktop/*
chmod 755 ${HOME}/.local/share/applications/*.desktop
chmod 755 ${HOME}/bin
chmod 755 ${HOME}/bin/*
chmod 755 ${HOME}/.cargo
chmod 755 ${HOME}/logs
[ -d ${HOME}/.cache ] || mkdir ${HOME}/.cache
chmod 755 ${HOME}/.cache
[ -d ${HOME}/.cache/mozilla ] || mkdir ${HOME}/.cache/mozilla
chmod 755 ${HOME}/.cache/mozilla
[ -d ${HOME}/.mozilla ] || mkdir ${HOME}/.mozilla
chmod 755 ${HOME}/.mozilla
[ -d ${HOME}/.mozilla/firefox ] || mkdir ${HOME}/.mozilla/firefox
chmod 755 ${HOME}/.mozilla/firefox
[ -d ${HOME}/.pki ] || mkdir ${HOME}/.pki
chmod 700 ${HOME}/.pki
[ -d ${HOME}/.pki/nssdb ] || mkdir ${HOME}/.pki/nssdb
chmod 700 ${HOME}/.pki/nssdb
for nss in ${HOME}/.pki/nssdb/*
do
  [ "${nss}" == "${HOME}/.pki/nssdb/*" ] && continue
  [ -d "${nss}" ] && chmod 700 "${nss}"
  [ -f "${nss}" ] && chmod 600 "${nss}"
done
[ -f ${HOME}/.pki/nssdb/pkcs11.txt ] && {
  cat ${HOME}/.pki/nssdb/pkcs11.txt | sed -e "s/kasm-default-profile/kasm-user/g" > /tmp/k$$
  cp /tmp/k$$ ${HOME}/.pki/nssdb/pkcs11.txt
  rm -f /tmp/k$$
}

[ -d ${HOME}/Applications ] || mkdir -p ${HOME}/Applications
chmod 755 ${HOME}/Applications
chmod 755 ${HOME}/Applications/*

rm -f ${HOME}/Desktop/xfce4-terminal.desktop
rm -f ${HOME}/Desktop/xfce4-file-manager.desktop

rm -rf /home/kasm-default-profile/*
rm -rf /home/kasm-default-profile/.??*

notify-send "AppImage Launcher desktop initialization complete!"
sleep 5

kill $(pgrep "notifyd")

have_open=$(type -p exo-open)
[ -f /etc/xdg/autostart/xfce4-notifyd.desktop ] && {
  [ "${have_open}" ] && exo-open /etc/xdg/autostart/xfce4-notifyd.desktop
}

[ -x /home/kasm-user/.local/kitty.app/bin/kitty ] && {
  /home/kasm-user/.local/kitty.app/bin/kitty \
      --session /home/kasm-user/.config/kitty/sessions/startup \
      --title 'Welcome to the AppImage Kasm workspace' 2> /dev/null &
}
