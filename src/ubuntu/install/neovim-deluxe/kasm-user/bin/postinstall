#!/bin/bash

export HOME="/home/kasm-user"
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
umask 022

# Do we have a Github API token?
[ "${GH_TOKEN}" ] || {
  [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  [ "${GH_TOKEN}" ] || {
    [ -f $HOME/.private ] && source $HOME/.private
    [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  }
}
[ "${GH_TOKEN}" ] && {
  # Check to make sure
  echo "${GH_TOKEN}" | grep __GITHUB_API | grep __TOKEN__ > /dev/null && {
    # It didn't get set right, unset it
    export GH_TOKEN=
  }
}

notify-send -u critical "One-time Neovim Desktop Initialization and Configuration"
notify-send -u critical "Installing Neovim Configuration Manager and dependencies" \
                        "This process can take several minutes, please be patient"

LOGDIR="$HOME/logs"

notify-send "Installing JetBrainsMono Nerd Font"
FONT_FILES=".config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml \
            .config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml \
            .config/xfce4/terminal/terminalrc"
for font_file in ${FONT_FILES}
do
  [ -f ${HOME}/${font_file}-jb ] && mv ${HOME}/${font_file}-jb ${HOME}/${font_file}
done
xfce4-panel -r
xfconf-query -c xsettings -p /Gtk/FontName -s "JetBrainsMono Nerd Font"
xfconf-query -c xsettings -p /Gtk/MonospaceFontName -s "JetBrainsMono Nerd Font Mono"

# Install Kitty terminal emulator
have_kitty=$(type -p kitty)
[ "${have_kitty}" ] || {
  [ -x $HOME/bin/install-kitty ] && {
    notify-send "Installing Kitty terminal emulator"
    ${HOME}/bin/install-kitty > ${LOGDIR}/install-kitty.log 2>&1
  }
}

notify-send "Installing zoxide smart cd command"
curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash

# Try to install Neovim and Neovide
have_nvim=$(type -p nvim)
have_neov=$(type -p neovide)

[ "${have_nvim}" ] || {
  [ -x $HOME/bin/install-neovim ] && {
    notify-send "Installing Neovim"
    ${HOME}/bin/install-neovim > ${LOGDIR}/install-neovim.log 2>&1
  }
}

[ "${have_neov}" ] || {
  [ -x $HOME/bin/install-neovide ] && {
    notify-send "Installing Neovide"
    ${HOME}/bin/install-neovide > ${LOGDIR}/install-neovide.log 2>&1
  }
}

have_lazy=$(type -p install-lazyman)
[ "${have_lazy}" ] && {
  install-lazyman -z noinstall > ${LOGDIR}/lazyman-install.log 2>&1
}

# We gave it our best shot
rm -f /home/*/bin/install-lazyman
rm -f /home/*/bin/install-neovim
rm -f /home/*/bin/install-neovide
rm -f $HOME/.config/autostart/postinstall.desktop

notify-send "Installing Vim plugins"
vim +PlugInstall +qall > /dev/null 2>&1

notify-send "Installing fzf fuzzy finder"
if [ "${GH_TOKEN}" ]; then
  AUTH_HEADER="-H \"Authorization: Bearer ${GH_TOKEN}\""
else
  AUTH_HEADER=
fi
API_URL="https://api.github.com/repos/junegunn/fzf/releases/latest"
DL_URL=
DL_URL=$(curl --silent ${AUTH_HEADER} "${API_URL}" \
    | jq --raw-output '.assets | .[]?.browser_download_url' \
    | grep "linux_amd64\.tar\.gz")

[ "${DL_URL}" ] && {
  TEMP_TGZ="$(mktemp --suffix=.tgz)"
  wget --quiet -O "${TEMP_TGZ}" "${DL_URL}"
  chmod 644 "${TEMP_TGZ}"
  mkdir -p /tmp/fzft$$
  tar -C /tmp/fzft$$ -xzf "${TEMP_TGZ}"
  [ -f /tmp/fzft$$/fzf ] && {
    [ -d ${HOME}/.local/bin ] || mkdir -p ${HOME}/.local/bin
    cp /tmp/fzft$$/fzf ${HOME}/.local/bin/fzf
    chmod 755 ${HOME}/.local/bin/fzf
  }
  rm -f "${TEMP_TGZ}"
  rm -rf /tmp/fzft$$
}

notify-send "Installing Desktop entries and fixing permissions"
# Fix Lazyman permissions
[ -d $HOME/.config/nvim-Lazyman/scripts ] && {
  chmod 755 $HOME/.config/nvim-Lazyman/scripts/*.sh
  chmod 755 $HOME/.config/nvim-Lazyman/scripts/*/*.sh
  chmod 755 $HOME/.config/nvim-Lazyman/*.sh
}

[ -f $HOME/.local/share/applications/kitty.desktop ] && {
  cp $HOME/.local/share/applications/kitty.desktop \
     $HOME/Desktop/kitty.desktop
}
[ -f $HOME/.local/share/icons/hicolor/256x256/apps/kitty.png ] && {
  cp $HOME/.local/share/icons/hicolor/256x256/apps/kitty.png \
     $HOME/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png
}
[ -f $HOME/.local/share/icons/hicolor/128x128/apps/kitty.png ] && {
  cp $HOME/.local/share/icons/hicolor/128x128/apps/kitty.png \
     $HOME/.local/kitty.app/lib/kitty/logo/kitty-128.png
}
[ -f $HOME/.local/share/icons/hicolor/32x32/apps/kitty.png ] && {
  cp $HOME/.local/share/icons/hicolor/32x32/apps/kitty.png \
     $HOME/.local/kitty.app/lib/kitty/logo/kitty.png
}

# Correct permissions/ownership
chmod 755 $HOME
chmod 644 $HOME/.aliases $HOME/.bashrc
find $HOME/.config -type f | xargs chmod 644
find $HOME/.config -type d | xargs chmod 755
find $HOME/.local -type d | xargs chmod 755
chmod 755 $HOME/Desktop
chmod 755 $HOME/Desktop/*
chmod 755 $HOME/bin
chmod 755 $HOME/bin/*
chmod 755 $HOME/.cargo
chmod 755 $HOME/logs
[ -d $HOME/.cache ] || mkdir $HOME/.cache
chmod 755 $HOME/.cache
[ -d $HOME/.cache/mozilla ] || mkdir $HOME/.cache/mozilla
chmod 755 $HOME/.cache/mozilla
[ -d $HOME/.mozilla ] || mkdir $HOME/.mozilla
chmod 755 $HOME/.mozilla
[ -d $HOME/.mozilla/firefox ] || mkdir $HOME/.mozilla/firefox
chmod 755 $HOME/.mozilla/firefox
[ -d $HOME/.pki ] || mkdir $HOME/.pki
chmod 700 $HOME/.pki
[ -d $HOME/.pki/nssdb ] || mkdir $HOME/.pki/nssdb
chmod 700 $HOME/.pki/nssdb
for nss in $HOME/.pki/nssdb/*
do
  [ "${nss}" == "$HOME/.pki/nssdb/*" ] && continue
  [ -d "${nss}" ] && chmod 700 "${nss}"
  [ -f "${nss}" ] && chmod 600 "${nss}"
done

rm -f $HOME/Desktop/xfce4-terminal.desktop
rm -f $HOME/Desktop/xfce4-file-manager.desktop

rm -rf /home/kasm-default-profile/*
rm -rf /home/kasm-default-profile/.??*

notify-send "Neovim initialization and configuration complete!"
sleep 8

kill $(pgrep "notifyd")

have_open=$(type -p exo-open)
[ -f /etc/xdg/autostart/xfce4-notifyd.desktop ] && {
  [ "${have_open}" ] && exo-open /etc/xdg/autostart/xfce4-notifyd.desktop
}

[ -x /home/kasm-user/.local/kitty.app/bin/kitty ] && {
  /home/kasm-user/.local/kitty.app/bin/kitty \
      --session /home/kasm-user/.config/kitty/sessions/startup \
      --title 'Welcome to the Neovim Kasm workspace' 2> /dev/null &
}
