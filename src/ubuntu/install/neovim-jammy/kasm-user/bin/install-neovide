#!/usr/bin/env bash
#
# GH_TOKEN, a GitHub token must be set in the environment
# If it is not already set then the convenience build script will set it
if [ "${GH_TOKEN}" ]; then
  export GH_TOKEN="${GH_TOKEN}"
else
  export GH_TOKEN="__GITHUB_API_TOKEN__"
fi
# Check to make sure
echo "${GH_TOKEN}" | grep __GITHUB_API | grep __TOKEN__ > /dev/null && {
  # It didn't get set right, unset it
  export GH_TOKEN=
}
if [ "${GH_TOKEN}" ]; then
  AUTH_HEADER="-H \"Authorization: Bearer ${GH_TOKEN}\""
else
  AUTH_HEADER=
fi

export PATH="$HOME/.local/bin:$PATH:$HOME/.cargo/bin"

[ -d $HOME/.local ] || mkdir -p $HOME/.local

have_neovide=$(command -v neovide)
[ "${have_neovide}" ] && {
  printf "\nNeovide already installed as %s" "${have_neovide}"
  printf "\nRemove neovide and rerun this script to reinstall Neovide"
}
[ -d "$HOME"/.local ] || mkdir -p "$HOME"/.local
[ -d "$HOME"/.local/bin ] || mkdir -p "$HOME"/.local/bin

name="neovide-linux-x86_64"
format="tar"
suffix="gz"

OWNER="neovide"
PROJECT="neovide"
API_URL="https://api.github.com/repos/${OWNER}/${PROJECT}/releases/latest"
DL_URL=
DL_URL=$(curl --silent ${AUTH_HEADER} "${API_URL}" \
    | jq --raw-output '.assets | .[]?.browser_download_url' \
    | grep "${name}\.${format}\.${suffix}$")
[ "${DL_URL}" ] && {
  printf "\nDownloading neovide release asset ..."
  TEMP_ASS="$(mktemp --suffix=.tgz)"
  wget --quiet -O "${TEMP_ASS}" "${DL_URL}" >/dev/null 2>&1
  chmod 644 "${TEMP_ASS}"
  mkdir -p /tmp/neov$$
  tar -C /tmp/neov$$ -xzf "${TEMP_ASS}"
  [ -f /tmp/neov$$/neovide ] && {
    chmod 755 /tmp/neov$$/neovide
    /tmp/neov$$/neovide --version && {
      rm -f /tmp/neovide$$
      mv /tmp/neov$$/neovide /tmp/neovide$$
    }
  }
  rm -f "${TEMP_ASS}"
  rm -rf /tmp/neov$$
  printf " done"
}
[ -x /tmp/neovide$$ ] && mv /tmp/neovide$$ "$HOME"/.local/bin/neovide
