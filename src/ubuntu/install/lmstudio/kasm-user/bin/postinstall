#!/bin/bash

export HOME="/home/kasm-user"
export PATH="${HOME}/bin:${HOME}/.local/bin:$PATH"
umask 022

sleep 5
notify-send -u critical "One-time LM Studio Desktop Initialization"

LOGDIR="${HOME}/logs"

notify-send "Installing LLM command line utility"
python3 -m pip install --user llm > ${LOGDIR}/install-llm.log 2>&1

notify-send "Installing AI helper Python modules"
python3 -m pip install --user strip-tags > ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user ttok >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user symbex >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user openai >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user pyperclip >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user pyaml >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user click >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user rich >> ${LOGDIR}/install-pip.log 2>&1
python3 -m pip install --user huggingface_hub >> ${LOGDIR}/install-pip.log 2>&1

notify-send "Using LLM to install gpt4all plugin"
llm install llm-gpt4all >> ${LOGDIR}/install-llm.log 2>&1
llm models default orca-mini-3b-gguf2-q4_0 >> ${LOGDIR}/install-llm.log 2>&1
llm aliases set orca-mini orca-mini-3b-gguf2-q4_0
llm aliases set orca-medium orca-2-7b
llm aliases set orca-full orca-2-13b
llm aliases set openorca mistral-7b-openorca
llm aliases set minilm all-MiniLM-L6-v2-f16
llm aliases set replit replit-code-v1_5-3b-q4_0
llm aliases set mptchat mpt-7b-chat-merges-q4_0
llm aliases set rift rift-coder-v0-7b-q4_0
llm aliases set german em_german_mistral_v01
llm aliases set instruct mistral-7b-instruct-v0
llm aliases set falcon gpt4all-falcon-q4_0
llm aliases set snoozy gpt4all-13b-snoozy-q4_0
llm aliases set wizard wizardlm-13b-v1
llm aliases set hermes nous-hermes-llama2-13b
llm aliases set starcoder starcoder-q4_0

rm -f ${HOME}/.config/autostart/postinstall.desktop

notify-send "Installing Desktop entries and fixing permissions"

[ -f ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png \
     ${HOME}/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png
}
[ -f ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty-128.png
}
[ -f ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty.png
}
[ -f ${HOME}/.local/share/applications/kitty.desktop ] && {
  cp ${HOME}/.local/share/applications/kitty.desktop \
     ${HOME}/Desktop/kitty.desktop
}
[ -f ${HOME}/.local/share/applications/btop.desktop ] && {
  cp ${HOME}/.local/share/applications/btop.desktop \
     ${HOME}/Desktop/btop.desktop
}
[ -f ${HOME}/.local/share/applications/ranger.desktop ] && {
  cp ${HOME}/.local/share/applications/ranger.desktop \
     ${HOME}/Desktop/ranger.desktop
}

# Correct permissions/ownership
[ -f ${HOME}/bin/fix_permissions ] && {
  chmod 755 ${HOME}/bin/fix_permissions
  ${HOME}/bin/fix_permissions
}

[ -d ${HOME}/Applications ] || mkdir -p ${HOME}/Applications
chmod 755 ${HOME}/Applications
chmod 755 ${HOME}/Applications/*

[ -x /home/kasm-user/.local/kitty.app/bin/kitty ] && {
  /home/kasm-user/.local/kitty.app/bin/kitty \
      --session /home/kasm-user/.config/kitty/sessions/startup \
      --title 'Welcome to the LM Studio Kasm workspace' 2> /dev/null &
}

LMS="LM_Studio.AppImage"
[ -d ${HOME}/Applications ] || mkdir ${HOME}/Applications
if [ -f /share/AppImages/${LMS} ]; then
  notify-send "Installing LM Studio"
  if [ -x ${HOME}/bin/appimage-launcher ]; then
    ${HOME}/bin/appimage-launcher /share/AppImages/${LMS}
  else
    cp /share/AppImages/${LMS} ${HOME}/Applications
  fi
else
  [ -x ${HOME}/.local/kitty.app/bin/kitty ] && {
    [ -x ${HOME}/bin/appimage-launcher ] && {
      ${HOME}/.local/kitty.app/bin/kitty \
          --session none \
          --title 'AppImage Launcher Select' \
          ${HOME}/bin/appimage-launcher
    }
  }
fi
# Copy the AppImage back to /share/AppImages if needed
[ -f /share/AppImages/${LMS} ] || {
  for appimg in ${HOME}/Applications/LM_Studio*AppImage
  do
    [ "${appimg}" == "${HOME}/Applications/LM_Studio*AppImage" ] && continue
    cp "${appimg}" /share/AppImages/${LMS}
    break
  done
}

notify-send "LM Studio desktop initialization complete!"

sleep 5

kill $(pgrep "notifyd")

have_open=$(type -p exo-open)
[ -f /etc/xdg/autostart/xfce4-notifyd.desktop ] && {
  [ "${have_open}" ] && exo-open /etc/xdg/autostart/xfce4-notifyd.desktop
}
