#!/bin/bash

export HOME="/home/kasm-user"
export PATH="${HOME}/bin:${HOME}/.local/bin:$PATH"
umask 022

# Do we have a Github API token?
[ "${GH_TOKEN}" ] || {
  [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  [ "${GH_TOKEN}" ] || {
    [ -f ${HOME}/.private ] && source ${HOME}/.private
    [ "${GH_API_TOKEN}" ] && export GH_TOKEN="${GH_API_TOKEN}"
  }
}
[ "${GH_TOKEN}" ] && export GITHUB_TOKEN="${GH_TOKEN}"

sleep 5
notify-send -u critical "One-time LM Studio Desktop Initialization"

LOGDIR="${HOME}/logs"

notify-send "Installing JetBrains Nerd Mono font"
# Install JetBrains Mono font
[ -x ${HOME}/bin/install-jetbrains ] && {
  ${HOME}/bin/install-jetbrains > ${LOGDIR}/install-jetbrains.log 2>&1
  FONT_FILES=".config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml \
              .config/xfce4/xfconf/xfce-perchannel-xml/xfwm4.xml \
              .config/xfce4/terminal/terminalrc"
  [ -f ${HOME}/.local/share/fonts/JetBrainsMonoNerdFontMono-Regular.ttf ] && {
    for font_file in ${FONT_FILES}
    do
      [ -f ${HOME}/${font_file}-jb ] && mv ${HOME}/${font_file}-jb ${HOME}/${font_file}
    done
  }
}

notify-send "Installing Kitty terminal emulator"
# Install Kitty terminal emulator
have_kitty=$(type -p kitty)
[ "${have_kitty}" ] || {
  [ -x ${HOME}/bin/install-kitty ] && {
    ${HOME}/bin/install-kitty > ${LOGDIR}/install-kitty.log 2>&1
  }
}
[ -f ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png \
     ${HOME}/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png
}
[ -f ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/128x128/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty-128.png
}
[ -f ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png ] && {
  cp ${HOME}/.local/share/icons/hicolor/32x32/apps/kitty.png \
     ${HOME}/.local/kitty.app/lib/kitty/logo/kitty.png
}
[ -f ${HOME}/.local/share/applications/kitty.desktop ] && {
  cp ${HOME}/.local/share/applications/kitty.desktop \
     ${HOME}/Desktop/kitty.desktop
}

notify-send "Installing nvm node version manager"

export NVM_DIR="/home/kasm-user/.nvm"
export NODE_VERSION="20.9.0"
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
. ${NVM_DIR}/nvm.sh
nvm install ${NODE_VERSION} > ${LOGDIR}/install-node.log 2>&1
nvm alias default ${NODE_VERSION}
nvm use default

export NODE_PATH="${NVM_DIR}/v${NODE_VERSION}/lib/node_modules"
export PATH="${NVM_DIR}/v${NODE_VERSION}/bin:${PATH}"

notify-send "Installing LLM command line utility"
python3 -m pip install --user llm > ${LOGDIR}/install-llm.log 2>&1
python3 -m pip install --user strip-tags >> ${LOGDIR}/install-llm.log 2>&1
python3 -m pip install --user ttok >> ${LOGDIR}/install-llm.log 2>&1
python3 -m pip install --user symbex >> ${LOGDIR}/install-llm.log 2>&1
notify-send "Using LLM to install gpt4all plugin"
llm install llm-gpt4all >> ${LOGDIR}/install-llm.log 2>&1
llm models default orca-mini-3b-gguf2-q4_0 >> ${LOGDIR}/install-llm.log 2>&1
llm aliases set orca-mini orca-mini-3b-gguf2-q4_0
llm aliases set orca-medium orca-2-7b
llm aliases set orca-full orca-2-13b
llm aliases set openorca mistral-7b-openorca
llm aliases set minilm all-MiniLM-L6-v2-f16
llm aliases set replit replit-code-v1_5-3b-q4_0
llm aliases set mptchat mpt-7b-chat-merges-q4_0
llm aliases set rift rift-coder-v0-7b-q4_0
llm aliases set german em_german_mistral_v01
llm aliases set instruct mistral-7b-instruct-v0
llm aliases set falcon gpt4all-falcon-q4_0
llm aliases set snoozy gpt4all-13b-snoozy-q4_0
llm aliases set wizard wizardlm-13b-v1
llm aliases set hermes nous-hermes-llama2-13b
llm aliases set starcoder starcoder-q4_0

#notify-send "Installing AI Messenger LLM GUI"
#git clone https://github.com/shinomakoi/AI-Messenger > ${LOGDIR}/install-messenger.log 2>&1
#[ -d AI-Messenger ] && {
#  cd AI-Messenger
#  python3 -m venv .venv
#  source ./.venv/bin/activate
#  python3 -m pip install -r requirements.txt >> ${LOGDIR}/install-messenger.log 2>&1
#  [ -d presets/Cards ] && {
#    cd presets/Cards
#    for card in ../../../.local/share/cards/*.png
#    do
#      [ "${card}" == "../../../.local/share/cards/*.png" ] && continue
#      ln -s ${card} .
#    done
#    cd ../..
#  }
#  cd ..
#  [ -f ${HOME}/.local/share/applications/messenger.desktop ] && {
#    cp ${HOME}/.local/share/applications/messenger.desktop \
#       ${HOME}/Desktop/messenger.desktop
#  }
#}

LMS="LM_Studio.AppImage"
[ -d ${HOME}/Applications ] || mkdir ${HOME}/Applications
if [ -f /share/${LMS} ]; then
  notify-send "Installing LM Studio"
  if [ -x ${HOME}/bin/appimage-launcher ]; then
    ${HOME}/bin/appimage-launcher /share/${LMS}
  else
    cp /share/${LMS} ${HOME}/Applications
  fi
else
  [ -x ${HOME}/.local/kitty.app/bin/kitty ] && {
    [ -x ${HOME}/bin/appimage-launcher ] && {
      ${HOME}/.local/kitty.app/bin/kitty \
          --session none \
          --title 'AppImage Launcher Select' \
          ${HOME}/bin/appimage-launcher
    }
  }
fi
# Copy the AppImage back to /share if needed
[ -f /share/${LMS} ] || {
  for appimg in ${HOME}/Applications/LM_Studio*AppImage
  do
    [ "${appimg}" == "${HOME}/Applications/LM_Studio*AppImage" ] && continue
    cp "${appimg}" /share/${LMS}
    break
  done
}

rm -f ${HOME}/.config/autostart/postinstall.desktop

notify-send "Installing Desktop entries and fixing permissions"

[ -f ${HOME}/.local/share/applications/btop.desktop ] && {
  cp ${HOME}/.local/share/applications/btop.desktop \
     ${HOME}/Desktop/btop.desktop
}
[ -f ${HOME}/.local/share/applications/ranger.desktop ] && {
  cp ${HOME}/.local/share/applications/ranger.desktop \
     ${HOME}/Desktop/ranger.desktop
}

# Correct permissions/ownership
chmod 755 ${HOME}
chmod 644 ${HOME}/.aliases ${HOME}/.bashrc
for fdir in config launchpadlib vim
do
  [ -d ${HOME}/.${fdir} ] && {
    find ${HOME}/.${fdir} -type f | xargs chmod 644
    find ${HOME}/.${fdir} -type d | xargs chmod 755
  }
done
find ${HOME}/.local -type d | xargs chmod 755
chmod 755 ${HOME}/.config/ranger/*.sh
chmod 755 ${HOME}/.local/share/applications/*
chmod 644 ${HOME}/.local/share/backgrounds/*
[ -d ${HOME}/Applications ] || mkdir -p ${HOME}/Applications
chmod 755 ${HOME}/Applications
chmod 755 ${HOME}/Applications/*
chmod 755 ${HOME}/Desktop
chmod 755 ${HOME}/Desktop/*
chmod 755 ${HOME}/bin
chmod 755 ${HOME}/bin/*
chmod 755 ${HOME}/logs
[ -d ${HOME}/.cache ] || mkdir ${HOME}/.cache
chmod 755 ${HOME}/.cache
[ -d ${HOME}/.cache/mozilla ] || mkdir ${HOME}/.cache/mozilla
chmod 755 ${HOME}/.cache/mozilla
[ -d ${HOME}/.mozilla ] || mkdir ${HOME}/.mozilla
chmod 755 ${HOME}/.mozilla
[ -d ${HOME}/.mozilla/firefox ] || mkdir ${HOME}/.mozilla/firefox
chmod 755 ${HOME}/.mozilla/firefox
[ -d ${HOME}/.pki ] || mkdir ${HOME}/.pki
chmod 700 ${HOME}/.pki
[ -d ${HOME}/.pki/nssdb ] || mkdir ${HOME}/.pki/nssdb
chmod 700 ${HOME}/.pki/nssdb
for nss in ${HOME}/.pki/nssdb/*
do
  [ "${nss}" == "${HOME}/.pki/nssdb/*" ] && continue
  [ -d "${nss}" ] && chmod 700 "${nss}"
  [ -f "${nss}" ] && chmod 600 "${nss}"
done

rm -f ${HOME}/Desktop/xfce4-terminal.desktop
rm -f ${HOME}/Desktop/xfce4-file-manager.desktop

rm -rf /home/kasm-default-profile/*
rm -rf /home/kasm-default-profile/.??*

notify-send "Installing Vim plugins"
vim +PlugInstall +qall > ${LOGDIR}/install-vimplugs.log 2>&1

notify-send "LM Studio desktop initialization complete!"
sleep 5

kill $(pgrep "notifyd")

have_open=$(type -p exo-open)
[ -f /etc/xdg/autostart/xfce4-notifyd.desktop ] && {
  [ "${have_open}" ] && exo-open /etc/xdg/autostart/xfce4-notifyd.desktop
}
